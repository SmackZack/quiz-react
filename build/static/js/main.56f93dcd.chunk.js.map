{"version":3,"sources":["assets/audio/correct-answer.mp3","assets/audio/wrong-answer.mp3","assets/audio/button-sound.mp3","components/Home.js","utils/is-empty.js","components/quiz/Play.js","components/quiz/QuizSummary.js","App.js","index.js"],"names":["module","exports","Home","Helmet","id","className","style","textAlign","to","isEmpty","value","undefined","Object","keys","length","trim","Play","props","displayQuestions","questions","state","currentQuestion","nextQuestion","previousQuestion","shuffled","sort","Math","random","selected","slice","currentQuestionIndex","answer","setState","numberOfQuestions","previousRandomNumbers","showOptions","handleDisableButton","handleOptionClick","e","target","innerHTML","toLowerCase","correctTimeout","setTimeout","correctSound","current","play","correctAnswer","wrongTimeout","wrongSound","wrongAnswer","handleNextButtonClick","playButtonSound","prevState","handlePreviousButtonClick","handleQuitButtonClick","window","confirm","history","push","handleButtonClick","buttonSound","M","toast","html","classes","displayLength","score","correctAnswers","numberOfAnsweredQuestions","endGame","navigator","vibrate","wrongAnswers","Array","from","document","querySelectorAll","forEach","option","visibility","usedFiftyFifty","handleHints","hints","indexOfAnswer","options","index","randomNumber","round","includes","concat","handleFiftyFifty","fiftyFifty","randomNumbers","count","newRandomNumber","startTimer","countDownTime","Date","now","interval","setInterval","distance","minutes","floor","seconds","clearInterval","time","previousButtonDisabled","nextButtonDisabled","alert","playerStats","fiftyFiftyUsed","hintsUsed","React","createRef","this","ref","src","correctNotification","wrongNotification","float","question","onClick","optionA","optionB","optionC","optionD","classnames","Component","QuizSummary","location","stats","remark","userScore","toFixed","App","path","exact","component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.56f93dcd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/correct-answer.ee6aadae.mp3\";","module.exports = __webpack_public_path__ + \"static/media/wrong-answer.c7106542.mp3\";","module.exports = __webpack_public_path__ + \"static/media/button-sound.32194199.mp3\";","import React, { Fragment } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Home = () => (\r\n    <Fragment>\r\n        <Helmet><title>Home - Quiz App</title></Helmet>\r\n        <div id=\"home\">\r\n            <section className=\"shadow-lg\">\r\n                <div style={{ textAlign: 'center' }}>\r\n                    <span className=\"mdi mdi-cube-outline cube\"></span>\r\n                </div>\r\n                <h1>Quiz App</h1>\r\n                <div className=\"play-button-container\">\r\n                    <ul>\r\n                        <li><Link className=\"play-button\" to=\"/play/quiz\">PLAY</Link></li>\r\n                    </ul>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    </Fragment>\r\n);\r\n\r\nexport default Home;","const isEmpty = (value) => \r\n    value === undefined ||\r\n    value == null ||\r\n    (typeof value === 'object' && Object.keys(value).length === 0) ||\r\n    (typeof value === 'string' && value.trim().length === 0);\r\n\r\nexport default isEmpty;","import React, { Component, Fragment } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport M from 'materialize-css';\r\nimport classnames from 'classnames';\r\n\r\nimport questions from '../../questions.json';\r\nimport isEmpty from '../../utils/is-empty';\r\n\r\nimport correctNotification from '../../assets/audio/correct-answer.mp3';\r\nimport wrongNotification from '../../assets/audio/wrong-answer.mp3';\r\nimport buttonSound from '../../assets/audio/button-sound.mp3';\r\n\r\nclass Play extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            questions,\r\n            selected:{},\r\n            currentQuestion: {},\r\n            nextQuestion: {},\r\n            previousQuestion: {},\r\n            answer: '',\r\n            numberOfQuestions: 0,\r\n            numberOfAnsweredQuestions: 0,\r\n            currentQuestionIndex: 0,\r\n            score: 0,\r\n            correctAnswers: 0,\r\n            wrongAnswers: 0,\r\n            hints: 5,\r\n            fiftyFifty: 2,\r\n            usedFiftyFifty: false,\r\n            nextButtonDisabled: false,\r\n            previousButtonDisabled: true,\r\n            previousRandomNumbers: [],\r\n            time: {}\r\n        };\r\n        this.interval = null;\r\n        this.correctSound = React.createRef();\r\n        this.wrongSound = React.createRef();\r\n        this.buttonSound = React.createRef();\r\n    }\r\n\r\n    componentDidMount () {\r\n        const { questions, currentQuestion, nextQuestion, previousQuestion } = this.state;\r\n        this.displayQuestions(questions, currentQuestion, nextQuestion, previousQuestion);\r\n        this.startTimer();\r\n       \r\n    }\r\n\r\n    componentWillUnmount () {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    displayQuestions = (questions = this.state.questions, currentQuestion, nextQuestion, previousQuestion) => {\r\n        const shuffled = questions.sort(() => 0.5 - Math.random());\r\n        let selected = shuffled.slice(0, 5);\r\n        let { currentQuestionIndex } = this.state;   \r\n        if (!isEmpty(selected)) {\r\n            questions = selected;\r\n            currentQuestion = selected[currentQuestionIndex];\r\n            nextQuestion = selected[currentQuestionIndex + 1];\r\n            previousQuestion = selected[currentQuestionIndex - 1];\r\n            const answer = currentQuestion.answer;\r\n            this.setState({\r\n                currentQuestion,\r\n                nextQuestion,\r\n                previousQuestion,\r\n                numberOfQuestions: selected.length,\r\n                answer,\r\n                previousRandomNumbers: []\r\n            }, () => {\r\n                this.showOptions();\r\n                this.handleDisableButton();\r\n            });\r\n        }     \r\n    };\r\n\r\n    handleOptionClick = (e) => {\r\n        if (e.target.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\r\n            this.correctTimeout = setTimeout(() => {\r\n                this.correctSound.current.play();\r\n            }, 500);\r\n            this.correctAnswer();\r\n        } else {\r\n            this.wrongTimeout = setTimeout(() => {\r\n                this.wrongSound.current.play();\r\n            }, 500);\r\n            this.wrongAnswer();\r\n        }\r\n    }\r\n\r\n    handleNextButtonClick = () => {\r\n        this.playButtonSound();\r\n        if (this.state.nextQuestion !== undefined) {\r\n            this.setState(prevState => ({\r\n                currentQuestionIndex: prevState.currentQuestionIndex + 1\r\n            }), () => {\r\n                this.displayQuestions(this.state.state, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\r\n            });\r\n        }\r\n    };\r\n\r\n    handlePreviousButtonClick = () => {\r\n        this.playButtonSound();\r\n        if (this.state.previousQuestion !== undefined) {\r\n            this.setState(prevState => ({\r\n                currentQuestionIndex: prevState.currentQuestionIndex - 1\r\n            }), () => {\r\n                this.displayQuestions(this.state.state, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\r\n            });\r\n        }\r\n    };\r\n\r\n    handleQuitButtonClick = () => {\r\n        this.playButtonSound();\r\n        if (window.confirm('Are you sure you want to quit?')) {\r\n            this.props.history.push('/');\r\n        }\r\n    };\r\n\r\n    handleButtonClick = (e) => {\r\n        switch (e.target.id) {\r\n            case 'next-button':\r\n                this.handleNextButtonClick();\r\n                break;\r\n\r\n            case 'previous-button':\r\n                this.handlePreviousButtonClick();\r\n                break;\r\n\r\n            case 'quit-button':\r\n                this.handleQuitButtonClick();\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        \r\n    };\r\n\r\n    playButtonSound = () => {\r\n        this.buttonSound.current.play();\r\n    };\r\n\r\n    correctAnswer = () => {\r\n        M.toast({\r\n            html: 'Correct Answer!',\r\n            classes: 'toast-valid',\r\n            displayLength: 1500\r\n        });\r\n        this.setState(prevState => ({\r\n            score: prevState.score + 1,\r\n            correctAnswers: prevState.correctAnswers + 1,\r\n            currentQuestionIndex: prevState.currentQuestionIndex + 1,\r\n            numberOfAnsweredQuestions: prevState.numberOfAnsweredQuestions + 1\r\n        }), () => {            \r\n            if (this.state.nextQuestion === undefined) {\r\n                this.endGame();\r\n            } else {\r\n                this.displayQuestions(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\r\n            }\r\n        });\r\n    }\r\n\r\n    wrongAnswer = () => {\r\n        navigator.vibrate(1000);\r\n        M.toast({\r\n            html: 'Wrong Answer!',\r\n            classes: 'toast-invalid',\r\n            displayLength: 1500\r\n        });\r\n        this.setState(prevState => ({\r\n            wrongAnswers: prevState.wrongAnswers + 1,\r\n            currentQuestionIndex: prevState.currentQuestionIndex + 1,\r\n            numberOfAnsweredQuestions: prevState.numberOfAnsweredQuestions + 1\r\n        }), () => {\r\n            if (this.state.nextQuestion === undefined) {\r\n                this.endGame();\r\n            } else {\r\n                this.displayQuestions(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\r\n            }\r\n        });\r\n    }\r\n\r\n    showOptions = () => {\r\n        const options = Array.from(document.querySelectorAll('.option'));\r\n\r\n        options.forEach(option => {\r\n            option.style.visibility = 'visible';\r\n        });\r\n\r\n        this.setState({\r\n            usedFiftyFifty: false\r\n        });\r\n    }\r\n\r\n    handleHints = () => {\r\n        if (this.state.hints > 0) {\r\n            const options = Array.from(document.querySelectorAll('.option'));\r\n            let indexOfAnswer;\r\n\r\n            options.forEach((option, index) => {\r\n                if (option.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\r\n                    indexOfAnswer = index;\r\n                }\r\n            });\r\n\r\n            while (true) {\r\n                const randomNumber = Math.round(Math.random() * 3);\r\n                if (randomNumber !== indexOfAnswer && !this.state.previousRandomNumbers.includes(randomNumber)) {\r\n                    options.forEach((option, index) => {\r\n                        if (index === randomNumber) {\r\n                            option.style.visibility = 'hidden';\r\n                            this.setState((prevState) => ({\r\n                                hints: prevState.hints - 1,\r\n                                previousRandomNumbers: prevState.previousRandomNumbers.concat(randomNumber)\r\n                            }));\r\n                        }\r\n                    });\r\n                    break;\r\n                }\r\n                if (this.state.previousRandomNumbers.length >= 3) break;\r\n            }\r\n        }\r\n    }\r\n\r\n    handleFiftyFifty = () => {\r\n        if (this.state.fiftyFifty > 0 && this.state.usedFiftyFifty === false) {\r\n            const options = document.querySelectorAll('.option');\r\n            const randomNumbers = [];\r\n            let indexOfAnswer;\r\n\r\n            options.forEach((option, index) => {\r\n                if (option.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\r\n                    indexOfAnswer = index;\r\n                }\r\n            });\r\n\r\n            let count = 0;\r\n            do {\r\n                const randomNumber = Math.round(Math.random() * 3);\r\n                if (randomNumber !== indexOfAnswer) {\r\n                    if (randomNumbers.length < 2 && !randomNumbers.includes(randomNumber) && !randomNumbers.includes(indexOfAnswer)) {\r\n                            randomNumbers.push(randomNumber);\r\n                            count ++;\r\n                    } else {\r\n                        while (true) {\r\n                            const newRandomNumber = Math.round(Math.random() * 3);\r\n                            if (!randomNumbers.includes(newRandomNumber) && newRandomNumber !== indexOfAnswer) {\r\n                                randomNumbers.push(newRandomNumber);\r\n                                count ++;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } while (count < 2);\r\n\r\n            options.forEach((option, index) => {\r\n                if (randomNumbers.includes(index)) {\r\n                    option.style.visibility = 'hidden';\r\n                }\r\n            });\r\n            this.setState(prevState => ({\r\n                fiftyFifty: prevState.fiftyFifty - 1,\r\n                usedFiftyFifty: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    startTimer = () => {\r\n        const countDownTime = Date.now() + 1800043843923084394839483290849032;\r\n        this.interval = setInterval(() => {\r\n            const now = new Date();\r\n            const distance = countDownTime - now;\r\n\r\n            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n            const seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n\r\n            if (distance < 0) {\r\n                clearInterval(this.interval);\r\n                this.setState({\r\n                    time: {\r\n                        minutes: 0,\r\n                        seconds: 0\r\n                    }\r\n                }, () => {\r\n                    this.endGame();\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    time: {\r\n                        minutes,\r\n                        seconds,\r\n                        distance\r\n                    }\r\n                });\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    handleDisableButton = () => {\r\n        if (this.state.previousQuestion === undefined || this.state.currentQuestionIndex === 0) {\r\n            this.setState({\r\n                previousButtonDisabled: true\r\n            });\r\n        } else {\r\n            this.setState({\r\n                previousButtonDisabled: false\r\n            });\r\n        }\r\n\r\n        if (this.state.nextQuestion === undefined || this.state.currentQuestionIndex + 1 === this.state.numberOfQuestions) {\r\n            this.setState({\r\n                nextButtonDisabled: true\r\n            });\r\n        } else {\r\n            this.setState({\r\n                nextButtonDisabled: false\r\n            });\r\n        }\r\n    }\r\n\r\n    endGame = () => {\r\n        alert('Quiz has eneded!');\r\n        const { state } = this;\r\n        const playerStats = {\r\n            score: state.score,\r\n            numberOfQuestions: state.numberOfQuestions,\r\n            numberOfAnsweredQuestions: state.correctAnswers + state.wrongAnswers,\r\n            correctAnswers: state.correctAnswers,\r\n            wrongAnswers: state.wrongAnswers,\r\n            fiftyFiftyUsed: 2 - state.fiftyFifty,\r\n            hintsUsed: 5 - state.hints\r\n        };\r\n        setTimeout(() => {\r\n            this.props.history.push('/play/quizSummary', playerStats);\r\n        }, 1000);\r\n    }\r\n\r\n    render () {\r\n        const { \r\n            currentQuestion, \r\n            currentQuestionIndex, \r\n            fiftyFifty, \r\n            hints, \r\n            numberOfQuestions,\r\n            time \r\n        } = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                <Helmet><title>Quiz Page</title></Helmet>\r\n                <Fragment>\r\n                    <audio ref={this.correctSound} src={correctNotification}></audio>\r\n                    <audio ref={this.wrongSound} src={wrongNotification}></audio>\r\n                    <audio ref={this.buttonSound} src={buttonSound}></audio>\r\n                </Fragment>\r\n                <div className=\"questions bg-light\">\r\n                    <h2>Quiz</h2>\r\n                    <div className=\"timer-container\">\r\n                        <p>\r\n                            <span className=\"left\" style={{ float: 'left' }}>{currentQuestionIndex + 1} of {numberOfQuestions}</span>   \r\n                        </p>\r\n                    </div>\r\n                    <h5>{currentQuestion.question}</h5>\r\n                    <div className=\"options-container\">\r\n                        <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionA}</p>\r\n                        <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionB}</p>\r\n                    </div>\r\n                    <div className=\"options-container\">\r\n                        <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionC}</p>\r\n                        <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionD}</p>\r\n                    </div>\r\n\r\n                    <div className=\"button-container\">\r\n                        <button \r\n                            className={classnames('', {'disable': this.state.previousButtonDisabled})}\r\n                            id=\"previous-button\" \r\n                            onClick={this.handleButtonClick}>\r\n                            Previous\r\n                        </button>\r\n                        <button \r\n                            className={classnames('', {'disable': this.state.nextButtonDisabled})}\r\n                            id=\"next-button\" \r\n                            onClick={this.handleButtonClick}>\r\n                                Next\r\n                            </button>\r\n                        <button id=\"quit-button\" onClick={this.handleButtonClick}>Quit</button>\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Play;","import React, { Component, Fragment } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass QuizSummary extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            score: 0,\r\n            numberOfQuestions: 0,\r\n            numberOfAnsweredQuestions: 0,\r\n            correctAnswers: 0,\r\n            wrongAnswers: 0,\r\n            hintsUsed: 0,\r\n            fiftyFiftyUsed: 0\r\n        };\r\n    }\r\n\r\n    componentDidMount () {\r\n        const { state } = this.props.location;\r\n        if (state) {\r\n            this.setState({\r\n                score: (state.score / state.numberOfQuestions) * 100,\r\n                numberOfQuestions: state.numberOfQuestions,\r\n                numberOfAnsweredQuestions: state.numberOfAnsweredQuestions,\r\n                correctAnswers: state.correctAnswers,\r\n                wrongAnswers: state.wrongAnswers,\r\n                hintsUsed: state.hintsUsed,\r\n                fiftyFiftyUsed: state.fiftyFiftyUsed\r\n            });\r\n        }\r\n    }\r\n\r\n    render () {\r\n        const { state } = this.props.location;\r\n        let stats, remark;\r\n        const userScore = this.state.score;\r\n\r\n        if (userScore <= 30 ) {\r\n            remark = 'You need more practice!';\r\n        } else if (userScore > 30 && userScore <= 50) {\r\n            remark = 'Better luck next time!';\r\n        } else if (userScore <= 70 && userScore > 50) {\r\n            remark = 'You can do better!';\r\n        } else if (userScore >= 71 && userScore <= 84) {\r\n            remark = 'You did great!';\r\n        } else {\r\n            remark = 'You\\'re an absolute genius!';\r\n        }\r\n\r\n        if (state !== undefined) {\r\n            stats = (\r\n                <Fragment>\r\n                    <div style={{ textAlign: 'center' }}>\r\n                        <span className=\"mdi mdi-check-circle-outline success-icon\"></span>\r\n                    </div>\r\n                    <h1>Quiz has ended</h1>\r\n                    <div className=\"container stats\">\r\n                        <h4>{remark}</h4>\r\n                        <h2>Your Score: {this.state.score.toFixed(0)}&#37;</h2>\r\n                        <span className=\"stat left\">Total number of questions: </span>\r\n                        <span className=\"right\">{this.state.numberOfQuestions}</span><br />\r\n\r\n                        <span className=\"stat left\">Number of attempted questions: </span>\r\n                        <span className=\"right\">{this.state.numberOfAnsweredQuestions}</span><br />\r\n\r\n                        <span className=\"stat left\">Number of Correct Answers: </span>\r\n                        <span className=\"right\">{this.state.correctAnswers}</span> <br />\r\n\r\n                        <span className=\"stat left\">Number of Wrong Answers: </span>\r\n                        <span className=\"right\">{this.state.wrongAnswers}</span><br />\r\n\r\n                        <span className=\"stat left\">Hints Used: </span>\r\n                        <span className=\"right\">{this.state.hintsUsed}</span><br />\r\n\r\n                        <span className=\"stat left\">50-50 Used: </span>\r\n                        <span className=\"right\">{this.state.fiftyFiftyUsed}</span>\r\n                    </div>\r\n                    <section>\r\n                        <ul>\r\n                            <li>\r\n                                <Link to =\"/play/quiz\">Play Again</Link>\r\n                            </li>\r\n                            <li>\r\n                                <Link to =\"/\">Back to Home</Link>\r\n                            </li>\r\n                        </ul>\r\n                    </section>\r\n                </Fragment>\r\n            );\r\n        } else {\r\n            stats = (\r\n                <section>\r\n                    <h1 className=\"no-stats\">No Statistics Available</h1>\r\n                    <ul>\r\n                        <li>\r\n                            <Link to =\"/play/quiz\">Take a Quiz</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to =\"/\">Back to Home</Link>\r\n                        </li>\r\n                    </ul>\r\n                </section>\r\n            );\r\n        }\r\n        return (\r\n            <Fragment>\r\n                <Helmet><title>Quiz App - Summary</title></Helmet>\r\n                <div className=\"quiz-summary\">\r\n                    {stats}\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuizSummary;","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\n\r\nimport Home from './components/Home';\r\nimport Play from './components/quiz/Play';\r\nimport QuizSummary from './components/quiz/QuizSummary';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Route path=\"/\" exact component={Home} />\r\n      <Route path=\"/play/quiz\" exact component={Play} />\r\n      <Route path=\"/play/quizSummary\" exact component={QuizSummary} />\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../node_modules/@mdi/font/css/materialdesignicons.min.css';\r\nimport '../node_modules/materialize-css/dist/css/materialize.min.css';\r\nimport '../node_modules/materialize-css/dist/js/materialize.min.js';\r\nimport './styles/styles.scss';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}